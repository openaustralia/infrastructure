---
- name: Install memcached
  apt: pkg=memcached

- name: Install dependency for ansible mysql_db module
  apt: pkg=python-mysqldb

- name: Create planningalerts databases
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: "pa-{{ item }}"
  with_items:
    - production
    - staging

- name: Create planningalerts user with access to the database (production)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: pa-production
    password: "{{ planningalerts_production_mysql_password }}"
    priv: 'pa-production.*:ALL'
    host: "%"

- name: Create planningalerts user with access to the database (staging)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: pa-staging
    password: "{{ planningalerts_staging_mysql_password }}"
    priv: 'pa-staging.*:ALL'
    host: "%"

- name: Ensure that deploy owns /srv/www and /srv/www/shared
  file:
    state: directory
    owner: deploy
    group: deploy
    path: '{{item}}'
  with_items:
    - /srv/www/production
    - /srv/www/production/shared
    - /srv/www/staging
    - /srv/www/staging/shared

- name: Ensure packages to build gem native extensions are installed
  apt:
    pkg: ['libmysqlclient-dev', 'libxml2-dev', 'libxslt1-dev']

- name: Copy application database configuration
  template:
    src: "database-{{ item }}.yml"
    dest: /srv/www/{{ item }}/shared/database.yml
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Copy application new relic configuration (disables Newrelic agent)
  template:
    src: newrelic.yml
    dest: /srv/www/production/shared/
    owner: deploy
    group: deploy
  notify: nginx reload

- name: Copy application environment variables
  template:
    src: "env.{{ item }}"
    # Naming of the file .env.production is a little misleading (in staging environment)
    # Probably should just be called "env" and capistrano will need updating too
    # TODO: Fix this
    dest: "/srv/www/{{ item }}/shared/.env.production"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx restart

- name: Ensure the log directories exist
  file:
    state: directory
    path: "/srv/www/{{ item }}/shared/log"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging

- name: Ensure the sitemaps directories exist
  file:
    state: directory
    path: "/srv/www/{{ item }}/shared/sitemaps"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging

- name: Ensure the system directories exist
  file:
    state: directory
    path: "/srv/www/{{ item }}/shared/system"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging

# Create fake let's encrypt directories when in development
- name: Create fake let's encrypt directories when in development
  file:
    state: directory
    path: "/etc/letsencrypt/live/{{ item }}"
  with_items:
    - planningalerts.org.au.test
    - test.planningalerts.org.au.test
  when: "'development' in group_names"

# We need to setup the SSL certificates before we try to configure nginx
# because otherwise nginx will try to look for non-existent certificates
- name: Copy SSL certificates for development
  copy:
    src: "{{ item }}.pem"
    # We're faking it as if these are let's encrypt certs. Makes for less magic config
    dest: "/etc/letsencrypt/live/{{ item }}/fullchain.pem"
    mode: 0644
  with_items:
    - planningalerts.org.au.test
    - test.planningalerts.org.au.test
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: nginx reload

- name: Copy SSL keys for development
  copy:
    src: "{{ item }}.key"
    dest: "/etc/letsencrypt/live/{{ item }}/privkey.pem"
    mode: 0640
  with_items:
    - planningalerts.org.au.test
    - test.planningalerts.org.au.test
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: nginx reload

- name: Install nginx now (for the benefit of certbot)
  apt: pkg=nginx
  when: "'ec2' in group_names"

- name: Install certificate using certbot
  include_role:
    name: geerlingguy.certbot
  vars:
    certbot_auto_renew_user: root
    certbot_auto_renew_minute: 10
    certbot_auto_renew_hour: 7
    certbot_create_if_missing: yes
    certbot_certs:
      - email: contact@oaf.org.au
        domains:
          - "{{ planningalerts_domain }}"
          - www."{{ planningalerts_domain }}"
          - api."{{ planningalerts_domain }}"
      - email: contact@oaf.org.au
        domains:
          - "test.{{ planningalerts_domain }}"
          - "www.test.{{ planningalerts_domain }}"
          - "api.test.{{ planningalerts_domain }}"
  when: "'ec2' in group_names"

- name: Copy nginx main configuration
  copy:
    src: nginx.conf
    dest: /etc/nginx/
  notify: nginx restart

- name: Copy test/test password for staging site
  copy:
    src: htpasswd
    dest: /etc/nginx/
  notify: nginx restart

- name: Copy nginx site configuration
  template:
    src: "{{ item }}"
    dest: /etc/nginx/sites-available/
  with_items:
    - default
    - production
    - staging
  notify: nginx reload

- name: Enable sites
  file:
    src: /etc/nginx/sites-available/{{ item }}
    dest: /etc/nginx/sites-enabled/{{ item }}
    state: link
  with_items:
    - default
    - production
    - staging
  notify: nginx reload

- name: Allow deploy user to control services
  copy:
    src: deploy_service_control
    dest: /etc/sudoers.d/
    validate: visudo -cf %s

- name: Set up (or remove) PlanningAlerts daily scrape and email job
  cron:
    name: planningalerts_scrape_and_email
    user: deploy
    hour: 12
    minute: 0
    job: "cd /srv/www/production/current && /usr/local/bin/bundle exec rake planningalerts:applications:scrape_and_email RAILS_ENV=production"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"

# TODO: Do we want scraping and email to happen for staging too?

- name: Install postfix so we can mail out from cron jobs
  apt:
    pkg: postfix

# TODO: Make this mail to different addresses for development/production
- name: Mail output of cron
  cronvar:
    name: MAILTO
    user: deploy
    value: web-administrators@openaustralia.org,q8z3f5c7d7g4e7m2@oaf.slack.com
  when: "'ec2' in group_names"

- name: Install redis for sidekiq
  apt:
    pkg: redis-server

- name: Autoremove unneeded packages
  apt:
    autoremove: yes