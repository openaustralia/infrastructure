## HTTP
server {
  listen 8000;
  server_name {{ domain }};
  {% if certbot_webroot is defined %}
  location ^~ /.well-known/acme-challenge/ {
    root {{ certbot_webroot }};
  }
  {% endif %}
  location / {
    rewrite ^/(.*) https://www.{{ domain }}/$1 permanent;
  }
}

server {
  listen 8000;
  server_name {{ server_hostname }};
  {% if certbot_webroot is defined %}
  location ^~ /.well-known/acme-challenge/ {
    root {{ certbot_webroot }};
  }
  {% endif %}
  location / {
    rewrite ^/(.*) https://www.{{ domain }}/$1 permanent;
  }
}

server {
  listen 8000;
  server_name www.{{ domain }};

  {% if certbot_webroot is defined %}
  location ^~ /.well-known/acme-challenge/ {
    root {{ certbot_webroot }};
  }
  {% endif %}

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  # TODO: Serve attachments directly from the cache, if possible.
  # See example apache config with alaveteli

  root /srv/www/{{ stage }}/current/public;
  passenger_enabled on;
  passenger_ruby /home/deploy/.rbenv/shims/ruby;

  # Serve maintenance page when present
  if (-f $document_root/system/maintenance.html) {
    return 503;
  }
  error_page 503 @maintenance;
  location @maintenance {
    rewrite  ^(.*)$  /system/maintenance.html break;
    break;
  }
}

# HTTPS
server {
  listen 443 ssl http2;
  server_name {{ domain }};
  rewrite ^/(.*) https://www.{{ domain }}/$1 permanent;

  ssl on;
  ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_session_cache  builtin:1000  shared:SSL:10m;
  ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4';
  client_max_body_size 100m;
}

server {
  listen 443 ssl http2;
  server_name www.{{ domain }};

  ssl on;
  ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_session_cache  builtin:1000  shared:SSL:10m;
  ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4';

  # If you need to access the "emergency user" and password_protect is enabled
  # then you probably have to disable it temporarily
  {% if password_protect | bool -%}
  auth_basic "{{ stage }}";
  auth_basic_user_file htpasswd;
  {% endif %}

  location / {

    # Block overly aggressive bot that isn't giving a sensible user agent
    deny 47.76.0.0/16;
    deny 47.242.0.0/16;
    deny 8.210.0.0/16;
    deny 8.218.0.0/16;
    deny 8.222.0.0/16;
    deny 47.82.0.0/19;

    # Additional ranges 2025-09-24
	
	# Kingsoft Cloud
    deny 104.250.52.0/22;
		
    # Meta / Facebook
    deny 57.141.2.0/24;
		
    # Google Cloud & Crawlers
    deny 34.174.0.0/17;
    deny 66.249.68.0/24;
		
    # SEMrush SEO crawler
    deny 185.191.171.0/24;
    deny 85.208.96.0/24;
		
    # Huawei Cloud
    deny 202.76.160.0/20;
    deny 146.174.160.0/20;
	
    # Amazon AWS
    deny 18.97.9.0/24;
		
    # Microsoft Azure / Bingbot
    deny 52.167.144.0/24;
    deny 40.77.167.0/24;
    deny 20.194.157.0/24;
    deny 20.27.94.0/24;
	
    # Enzu / Hosting
    deny 108.187.240.0/24;
    deny 107.163.177.0/24;
    deny 23.231.224.0/24;
    deny 192.229.67.0/24;
    
    # Pass the request on to Varnish.
    proxy_pass  http://127.0.0.1;

    # Pass a bunch of headers to the downstream server, so they'll know what's going on.
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Most web apps can be configured to read this header and understand that the current session is actually HTTPS.
    proxy_set_header X-Forwarded-Proto https;

    # We expect the downstream servers to redirect to the right hostname, so don't do any rewrites here.
    proxy_redirect off;

    client_max_body_size 100m;
  }
}
