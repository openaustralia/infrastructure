# For local development (under vagrant we don't want the cron jobs generating email)
- cronvar:
    name: MAILTO
    # Also sends to #righttoknow-log slack channel
    value: web-administrators@openaustralia.org,k6g2t1e7e6u1p0f2@oaf.slack.com
    cron_file: "{{ item }}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"
  when: "'ec2' in group_names"

# Every 5 minutes
# */5 * * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/change-xapian-database.lock "!!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/update-xapian-index verbose=true" >> !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/log/update-xapian-index.log || echo "stalled?"
- name: Add alaveteli crontab - update-xapian-index
  cron:
    user: deploy
    name: "update-xapian-index"
    minute: "0,5,10,15,20,25,30,35,40,45,50,55"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./update-xapian-index.lock \"./script/update-xapian-index verbose=true\" >> ./log/update-xapian-index.log || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Every 10 minutes
# 0,10,20,30,40,50 * * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/send-batch-requests.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/send-batch-requests || echo "stalled?"
- name: Add alaveteli crontab entry - send-batch-requests
  cron:
    user: deploy
    name: "send-batch-requests"
    minute: "0,10,20,30,40,50"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./send-batch-requests.lock ./script/send-batch-requests || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once an hour
# 09 * * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/alert-comment-on-request.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/alert-comment-on-request || echo "stalled?"
- name: Add alaveteli crontab - alert-comment-on-request
  cron:
    user: deploy
    name: "alert-comment-on-request"
    minute: "9"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./alert-comment-on-request.lock ./script/alert-comment-on-request || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once an hour
# 31 * * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/load-mail-server-logs.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/load-mail-server-logs || echo "stalled?"
- name: Add alaveteli crontab - load-mail-server-logs
  cron:
    user: deploy
    name: "load-mail-server-logs"
    minute: "31"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./load-mail-server-logs.lock ./script/load-mail-server-logs || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 31 1 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/change-xapian-database.lock "!!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/compact-xapian-database production !!(*= $site *)!!" || echo "stalled?"
- name: Add alaveteli crontab - compact-xapian-database
  cron:
    user: deploy
    name: "compact-xapian-database"
    minute: "31"
    hour: "1"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./compact-xapian-database.lock \"./script/compact-xapian-database production alaveteli-{{ item }}\" || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 0 0 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/delete-expired-embargoes.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/delete-expired-embargoes || echo "stalled?"
- name: Add alaveteli crontab - delete-expired-embargoes
  cron:
    user: deploy
    name: "delete-expired-embargoes"
    minute: "0"
    hour: "0"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./delete-expired-embargoes.lock ./script/delete-expired-embargoes || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"


# Once a day, early morning
# 23 4 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/delete-old-things.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/delete-old-things || echo "stalled?"
- name: Add alaveteli crontab - delete-old-things
  cron:
    user: deploy
    name: "delete-old-things"
    minute: "23"
    hour: "4"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./delete-old-things.lock ./script/delete-old-things || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 0 5 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/update-overdue-info-request-events.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/update-overdue-info-request-events || echo "stalled?"
- name: Add alaveteli crontab - update-overdue-info-request-events
  cron:
    user: deploy
    name: "update-overdue-info-request-events"
    minute: "0"
    hour: "5"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./update-overdue-info-request-events.lock ./script/update-overdue-info-request-events || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 0 6 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/alert-overdue-requests.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/alert-overdue-requests || echo "stalled?"
- name: Add alaveteli crontab - alert-overdue-requests
  cron:
    user: deploy
    name: "alert-overdue-requests"
    minute: "0"
    hour: "6"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./alert-overdue-requests.lock ./script/alert-overdue-requests || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 0 7 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/alert-new-response-reminders.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/alert-new-response-reminders || echo "stalled?"
- name: Add alaveteli crontab - alert-new-response-reminders
  cron:
    user: deploy
    name: "alert-new-response-reminders"
    minute: "0"
    hour: "7"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./alert-new-response-reminders.lock ./script/alert-new-response-reminders || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 0 8 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/alert-not-clarified-request.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/alert-not-clarified-request || echo "stalled?"
- name: Add alaveteli crontab - alert-not-clarified-request
  cron:
    user: deploy
    name: "alert-not-clarified-request"
    minute: "0"
    hour: "8"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./alert-not-clarified-request.lock ./script/alert-not-clarified-request || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 0 9 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/alert-embargoes-expiring.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/alert-embargoes-expiring || echo "stalled?"
- name: Add alaveteli crontab - alert-embargoes-expiring
  cron:
    user: deploy
    name: "alert-embargoes-expiring"
    minute: "0"
    hour: "9"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./alert-embargoes-expiring.lock ./script/alert-embargoes-expiring || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 0 10 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/update-expiring-embargo-info-request-events.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/update-expiring-embargo-info-request-events || echo "stalled?"
- name: Add alaveteli crontab - update-expiring-embargo-info-request-events
  cron:
    user: deploy
    name: "update-expiring-embargo-info-request-events"
    minute: "0"
    hour: "10"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./update-expiring-embargo-info-request-events.lock ./script/update-expiring-embargo-info-request-events || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 0 12 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/alert-embargoes-expired.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/alert-embargoes-expired || echo "stalled?"
- name: Add alaveteli crontab - alert-embargoes-expired
  cron:
    user: deploy
    name: "alert-embargoes-expired"
    minute: "0"
    hour: "12"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./alert-embargoes-expired.lock ./script/alert-embargoes-expired || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 2 4 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/check-recent-requests-sent.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/check-recent-requests-sent || echo "stalled?"
- name: Add alaveteli crontab - check-recent-requests-sent
  cron:
    user: deploy
    name: "check-recent-requests-sent"
    minute: "2"
    hour: "4"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./check-recent-requests-sent.lock ./script/check-recent-requests-sent || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 45 3 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/stop-new-responses-on-old-requests.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/stop-new-responses-on-old-requests || echo "stalled?"
- name: Add alaveteli crontab - stop-new-responses-on-old-requests
  cron:
    user: deploy
    name: "stop-new-responses-on-old-requests"
    minute: "45"
    hour: "3"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./stop-new-responses-on-old-requests.lock ./script/stop-new-responses-on-old-requests || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 55 4 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/update-public-body-stats.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/update-public-body-stats || echo "stalled?"
- name: Add alaveteli crontab - update-public-body-stats
  cron:
    user: deploy
    name: "update-public-body-stats"
    minute: "55"
    hour: "4"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./update-public-body-stats.lock ./script/update-public-body-stats || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day, early morning
# 0 6 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/send-webhook-digest.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/send-webhook-digest || echo "stalled?"
- name: Add alaveteli crontab - send-webhook-digest
  cron:
    user: deploy
    name: "send-webhook-digest"
    minute: "0"
    hour: "6"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./send-webhook-digest.lock ./script/send-webhook-digest || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day on all servers
# 43 2 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/request-creation-graph
- name: Add alaveteli crontab entry - request-creation-graph
  cron:
    user: deploy
    name: "request-creation-graph"
    minute: "43"
    hour: "2"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production ./script/request-creation-graph'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a day on all servers
# 48 2 * * * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/user-use-graph
- name: Add alaveteli crontab entry - user-use-graph
  cron:
    user: deploy
    name: "user-use-graph"
    minute: "48"
    hour: "2"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production ./script/user-use-graph'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a week (very early Monday morning)
# 54 2 * * 1 !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/cleanup-holding-pen
- name: Add alaveteli crontab entry - cleanup-holding-pen
  cron:
    user: deploy
    name: "cleanup-holding-pen"
    minute: "54"
    hour: "2"
    weekday: "1"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production ./script/cleanup-holding-pen'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a week (early Monday morning)
# 37 8 * * 1 !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/commonlib/bin/run-with-lockfile.sh -n !!(*= $vhost_dir *)!!/send-pro-metrics-report.lock !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/send-pro-metrics-report || echo "stalled?"
- name: Add alaveteli crontab - send-pro-metrics-report
  cron:
    user: deploy
    name: "send-pro-metrics-report"
    minute: "37"
    hour: "8"
    weekday: "1"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./send-pro-metrics-report.lock ./script/send-pro-metrics-report || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a week (on a Wednesday evening)
# 42 23 * * 3 !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/download-geoip-data
- name: Add alaveteli crontab entry - download-geoip-data
  cron:
    user: deploy
    name: "download-geoip-data"
    minute: "42"
    hour: "23"
    weekday: "3"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production ./script/download-geoip-data'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"

# Once a year :)
# 0 0 1 11 * !!(*= $user *)!! !!(*= $vhost_dir *)!!/!!(*= $vcspath *)!!/script/send-public-holiday-reminder
- name: Add alaveteli crontab entry - send-public-holiday-reminder
  cron:
    user: deploy
    name: "send-public-holiday-reminder"
    minute: "0"
    hour: "0"
    day: "1"
    month: "11"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production ./script/send-public-holiday-reminder'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items: "{{ ['staging'] if (standalone_staging | default(false)) else (['production'] if (standalone_production | default(false)) else ['production', 'staging']) }}"
