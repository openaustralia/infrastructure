---
- name: Remove apache2
  apt:
    name: apache2
    state: absent

- name: Add key for passenger (Ubuntu 18.04)
  apt_key:
    url: http://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0xAC40B2F7
    state: present
  when: ansible_distribution_release == 'bionic'

- name: Add key for passenger (Ubuntu 22.04)
  ansible.builtin.get_url:
    url: https://oss-binaries.phusionpassenger.com/auto-software-signing-gpg-key.txt
    dest: /usr/share/keyrings/phusionpassenger-archive-keyring.asc
  when: ansible_distribution_release == 'jammy'

- name: Apt via https
  apt:
    name: apt-transport-https
    state: present

- name: Apt add passenger to list (Ubuntu 18.04)
  apt_repository:
    repo: 'deb https://oss-binaries.phusionpassenger.com/apt/passenger {{ansible_distribution_release}} main'
    state: present
    update_cache: yes
  when: ansible_distribution_release == 'bionic'

- name: Apt add passenger to list (Ubuntu 22.04)
  apt_repository:
    repo: 'deb [signed-by=/usr/share/keyrings/phusionpassenger-archive-keyring.asc] https://oss-binaries.phusionpassenger.com/apt/passenger {{ansible_distribution_release}} main'
    state: present
    update_cache: yes
  when: ansible_distribution_release == 'jammy'

- name: Install nginx and passenger
  apt:
    pkg:
      - libnginx-mod-http-passenger
      - nginx
    state: present

# We want this directory to exist in development too so that
# things are as consistent as possible
# Basically everything in /data is stuff we want backed up that
# isn't the database
- name: Create data mountpoint
  file:
    state: directory
    path: /data

# On EC2 we're using a seperate EBS volume to hold application data
- name: Create filesystem on attached block storage
  filesystem:
    fstype: ext4
    dev: /dev/nvme1n1
  when: "'ec2' in group_names"

- name: Mount /data filesystem
  mount:
    path: /data
    # Mount device by UUID because that's needed to run on AWS Nitro based instances (e.g. t3)
    # See https://aws.amazon.com/premiumsupport/knowledge-center/boot-error-linux-nitro-instance/
    src: "UUID={{ ansible_facts['devices']['nvme1n1']['links']['uuids'][0] }}"
    fstype: ext4
    state: mounted
  when: "'ec2' in group_names"

- name: Create directories in /data
  file:
    path: "/data/{{ item[0] }}/{{ item[1] }}"
    owner: deploy
    group: deploy
    state: directory
  with_nested:
    - ['production', 'staging']
    - ['files', 'cache', 'bundle']

- name: Ensure that deploy owns application directories
  file:
    state: directory
    owner: deploy
    group: deploy
    path: "/srv/www/{{ item[0] }}/{{ item[1] }}"
  with_nested:
    - ['production', 'staging']
    - ['', 'shared']

- name: Link directories in /srv/www to /data
  file:
    state: link
    src: "/data/{{ item[0] }}/{{ item[1] }}"
    dest: "/srv/www/{{ item[0] }}/shared/{{ item[1] }}"
  with_nested:
    - ['production', 'staging']
    - ['files', 'cache', 'bundle']

- name: Set the ruby version for the alaveteli deploy (production)
  copy:
    content: "{{ ruby_version_production }}"
    dest: /srv/www/production/shared/rbenv-version

- name: Set the ruby version for the alaveteli deploy (staging)
  copy:
    content: "{{ ruby_version_staging }}"
    dest: /srv/www/staging/shared/rbenv-version

- name: Another Aleveteli config to force production environment
  template:
    src: rails_env.rb
    dest: /srv/www/{{ item }}/shared
  with_items:
    - production
    - staging

- name: Add newrelic configuration to disable agent
  template:
    src: newrelic.yml
    dest: /srv/www/{{ item }}/shared/
  vars:
    newrelic_app_name: "Right To Know{{ (item == 'production') | ternary('', ' Staging') }}"
  with_items:
    - production
    - staging

- name: Install wrapper script for setting correct version of ruby in path
  template:
    src: run.sh
    dest: /srv/www/{{ item }}/shared
    # Make it executable
    mode: 0755
  with_items:
    - production
    - staging

# Installing via bash so that rbenv is used. Otherwise would install gems for default system ruby
# We need to use 1.14.6 because the Gemfile.lock file is corrupted in Alaveteli 0.28.0.10 and if
# we use a later version of bundler it will complain and not deploy
- name: Install bundler gem (production)
  command: bash -lc "rbenv shell {{ ruby_version_production }}; gem install bundler --version 1.14.6"
  args:
    creates: "/home/deploy/.rbenv/versions/{{ ruby_version_production }}/lib/ruby/gems/*/gems/bundler-*"
  become: true
  become_user: deploy

# Installing via bash so that rbenv is used. Otherwise would install gems for default system ruby
# We need to use 1.14.6 because the Gemfile.lock file is corrupted in Alaveteli 0.28.0.10 and if
# we use a later version of bundler it will complain and not deploy
- name: Install bundler gem (staging)
  command: bash -lc "rbenv shell {{ ruby_version_staging}}; gem install bundler --version 1.14.6"
  args:
    creates: "/home/deploy/.rbenv/versions/{{ ruby_version_staging }}/lib/ruby/gems/*/gems/bundler-*"
  become: true
  become_user: deploy

# - name: Add postgresql apt repository
#   apt_repository:
#     repo: deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main
#     filename: pgdg
#
# - name: Import postgresql repository signing key
#   apt_key:
#     url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
#     id: ACCC4CF8
#
# # We're using a slightly older postgres client so that pg_dump still
# # works with "-i" which would cause a rails migration to fail otherwise.
# # This will be fixed by upgrading to the latest alavetelli.
# - name: Install postgresql-client-9.4
#   apt:
#     pkg: "{{ item }}"
#     update_cache: true
#   with_items:
#     - postgresql-client-9.4
#     - libpq-dev

# To install pdftk-java on Bionic (18.04) we need to do a workaround
# See https://github.com/mysociety/alaveteli/pull/5232/files#diff-254fd36aecf20b2c0e6ae10facadc345bdcc12096772ec7abe227b12d1e77f4fR79
# We need to allow it to install pdftk-java from Cosmic (18.10)
# On Ubuntu 22.04 (jammy), pdftk-java is available in the standard repos

- name: Add cosmic repo for pdftk-java
  apt_repository:
    repo: deb http://old-releases.ubuntu.com/ubuntu/ cosmic universe
  when: ansible_distribution_release == 'bionic'

# Using /etc/apt/preferences we're deprioritising the cosmic packages
- name: Deprioritise cosmic packages
  copy:
    src: apt_preferences
    dest: /etc/apt/preferences
  when: ansible_distribution_release == 'bionic'

# This list of packages came from https://github.com/mysociety/alaveteli/blob/0.34.0.1/config/packages.ubuntu-bionic
# Note: bundler and python-yaml are only available/needed on Ubuntu 18.04
- name: Install packages required by Alaveteli (Ubuntu 18.04)
  apt:
    name:
      - build-essential
      - bundler
      - catdoc
      - elinks
      - gettext
      - ghostscript
      - gnuplot-nox
      - imagemagick
      - libicu-dev
      - libmagic-dev
      - libmagickwand-dev
      - libpq-dev
      - libsqlite3-dev
      - libxml2-dev
      - libxslt-dev
      - links
      - lockfile-progs
      - memcached
      - mutt
      - pdftk-java
      - poppler-utils
      - postgresql
      - postgresql-client
      - python-yaml
      - rake
      - ruby
      - ruby-dev
      - sqlite3
      - tnef
      - ttf-bitstream-vera
      - unrtf
      - unzip
      - uuid-dev
      # See separate installation below
      # - wkhtmltopdf-static
      - wv
      - xapian-tools
    state: present
  when: ansible_distribution_release == 'bionic'

- name: Install packages required by Alaveteli (Ubuntu 22.04)
  apt:
    name:
      - build-essential
      # bundler is installed via gem, not as package
      - catdoc
      - elinks
      - gettext
      - ghostscript
      - gnuplot-nox
      - imagemagick
      - libicu-dev
      - libmagic-dev
      - libmagickwand-dev
      - libpq-dev
      - libsqlite3-dev
      - libxml2-dev
      - libxslt-dev
      - links
      - lockfile-progs
      - memcached
      - mutt
      - pdftk-java
      - poppler-utils
      - postgresql
      - postgresql-client
      - python3-yaml
      - rake
      - ruby
      - ruby-dev
      - sqlite3
      - tnef
      - fonts-liberation  # Replaces ttf-bitstream-vera
      - unrtf
      - unzip
      - uuid-dev
      - wkhtmltopdf  # Available as standard package
      - wv
      - xapian-tools
    state: present
  when: ansible_distribution_release == 'jammy'

# Get wkhtmltopdf from project website (Ubuntu 18.04 only)
# Ubuntu 22.04 has wkhtmltopdf in standard repos (installed above)
- name: Install wkhtmltopdf (Ubuntu 18.04)
  apt:
    # We're installing a slightly out-of-date version of wkhtmltopdf here (0.12.5) because the latest version
    # right now (0.12.6) disables local file access by default. There's a command-line option to enable local
    # file access but I'm not sure it will work with the current way ALavateli calls an external command
    deb: https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.bionic_amd64.deb
  when: ansible_distribution_release == 'bionic'

# The changes of there being differences between the production and staging version
# of this script are extremely small. So, just using the production version.
# This is used in cron jobs
- name: Link run-with-lockfile.sh so it's available system-wide
  file:
    src: "/srv/www/production/current/commonlib/bin/run-with-lockfile.sh"
    dest: "/usr/bin/run-with-lockfile"
    force: true
    state: link

- name: Install dependency for postgresql_db (Ubuntu 18.04)
  apt: 
    pkg: python-psycopg2
  when: ansible_distribution_release == 'bionic'

- name: Install dependency for postgresql_db (Ubuntu 22.04)
  apt:
    pkg: python3-psycopg2
  when: ansible_distribution_release == 'jammy'

- name: Create database
  postgresql_db:
    login_host: "{{ postgresql_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    name: "rtk-{{ item }}"
  with_items:
    - production
    - staging

- name: Create posgresql role
  postgresql_user:
    login_host: "{{ postgresql_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "rtk-{{ item }}"
    name: "rtk-{{ item }}"
    password: "{{ (item == 'production') | ternary(db_password_production, db_password_staging) }}"
    priv: ALL
    no_password_changes: true
  with_items:
    - production
    - staging

- name: Create posgresql user rtk-production-readonly for metabase
  postgresql_user:
    login_host: "{{ postgresql_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "rtk-production"
    name: "rtk-production-readonly"
    password: "{{ rtk_production_readonly_postgresql_password }}"
    no_password_changes: true

- name: Give the user rtk-production-readonly readonly access to the production righttoknow database
  postgresql_privs:
    login_host: "{{ postgresql_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "rtk-production"
    role: "rtk-production-readonly"
    privs: SELECT
    objs: ALL_IN_SCHEMA

- name: Copy over database configuration for application
  template:
    src: database.yml
    dest: "/srv/www/{{ item }}/shared/database.yml"
    owner: deploy
    group: deploy
  vars:
    - stage: "{{ item }}"
    - password: "{{ (item == 'production') | ternary(db_password_production, db_password_staging) }}"
  with_items:
    - production
    - staging
  notify: nginx restart

- name: Copy init scripts
  template:
    src: "init/{{ item[1] }}"
    dest: "/etc/init.d/{{ item[1] }}-{{ item[0] }}"
    mode: 0755
  vars:
    - stage: "{{ item[0] }}"
  with_nested:
    - ['production', 'staging']
    - ['send-notifications', 'foi-alert-tracks', 'alaveteli']

- name: Generate nginx config
  template:
    src: "nginx/{{ item }}"
    dest: /etc/nginx
  with_items:
    - nginx.conf
    - htpasswd
  notify: nginx reload

- name: Copy nginx config for the app redirects
  template:
    src: nginx/default
    dest: /etc/nginx/sites-available
    owner: root
    group: root
    mode: 644
  notify: nginx reload

- name: Copy nginx config for the app
  template:
    src: nginx/stage
    dest: /etc/nginx/sites-available/{{ item }}
    owner: root
    group: root
    mode: 644
  vars:
    domain: "{{ (item == 'staging') | ternary('test.', '') }}{{ righttoknow_domain }}"
    stage: "{{ item }}"
    password_protect: "{{ item == 'staging' }}"
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Enable sites
  file:
    src: /etc/nginx/sites-available/{{ item }}
    dest: /etc/nginx/sites-enabled/{{ item }}
    state: link
  with_items:
    - default
    - production
    - staging
  notify: nginx reload

- name: Apply Alaveteli config (production)
  template:
    src: general.yml
    dest: /srv/www/production/shared/
    owner: deploy
    group: deploy
  vars:
    domain: "{{ righttoknow_domain }}"
    site_name: "Right to Know"
    incoming_email_prefix: "foi+"
    staging_site: "0"
    override_all_public_body_request_emails: null
    stage: production
    stripe_publishable_key: "{{ stripe_publishable_key_live }}"
    stripe_secret_key: "{{ stripe_secret_key_live }}"
    stripe_webhook_secret: "{{ stripe_webhook_secret_production }}"
    enable_alaveteli_pro: true
    enable_pro_pricing: true
    pro_referral_coupon: "{{ pro_referral_coupon_production }}"
  notify: nginx restart

- name: Apply Alaveteli config (staging)
  template:
    src: general.yml
    dest: /srv/www/staging/shared/
    owner: deploy
    group: deploy
  vars:
    domain: "test.{{ righttoknow_domain }}"
    site_name: "Right to Know (STAGING)"
    incoming_email_prefix: "foitest+"
    staging_site: "1"
    override_all_public_body_request_emails: "contact@righttoknow.org.au"
    stage: staging
    stripe_publishable_key: "{{ stripe_publishable_key_test }}"
    stripe_secret_key: "{{ stripe_secret_key_test }}"
    stripe_webhook_secret: "{{ stripe_webhook_secret_staging }}"
    enable_alaveteli_pro: true
    enable_pro_pricing: true
    pro_referral_coupon: "{{ pro_referral_coupon_staging }}"
  notify: nginx restart

- name: Apply user spam scorer config
  template:
    src: user_spam_scorer.yml
    dest: "/srv/www/{{ item }}/shared/user_spam_scorer.yml"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx restart

- import_tasks: certificates.yml
- import_tasks: cron.yml

- name: Add deploy user to adm group so it can read mail logs
  user:
    name: deploy
    groups: adm
    append: yes

- name: Install varnish
  apt:
    pkg: varnish

- name: Update varnish config
  copy:
    src: default.vcl
    dest: /etc/varnish
  notify: restart varnish

- name: Update varnish startup config
  copy:
    src: varnish.service
    dest: /lib/systemd/system/varnish.service
  notify: restart varnish

- name: Install postfix (and opendkim) for email handling
  apt:
    pkg:
      - postfix
      - opendkim
      # Only needed to run opendkim-genkey
      # TODO: Probably don't need opendkim-tools in production
      - opendkim-tools

- name: Create directory for DKIM keypair
  file:
    path: /etc/dkimkeys/righttoknow.org.au
    owner: opendkim
    group: opendkim
    mode: 0700
    state: directory

# Generated public/private keypair for opendkim with:
# opendkim-genkey -b 2048 -d righttoknow.org.au -D /etc/dkimkeys -s default -v

- name: Apply DKIM keypair
  copy:
    src: "dkimkeys/{{ item }}"
    dest: /etc/dkimkeys/righttoknow.org.au
    owner: opendkim
    group: opendkim
    mode: "0600"
  with_items:
    - default.private
    # It isn't strictly necessary to copy across default.txt as this is just a record of what needs to be added to DNS
    # Doing this to try to be a little self-documenting, I guess.
    - default.txt
  notify: restart opendkim

- name: Create directory for opendkim socket that's accessible by postfix
  file:
    path: /var/spool/postfix/opendkim
    owner: opendkim
    group: postfix
    state: directory

- name: Postfix needs to be part of opendkim group to access the socket
  user:
    name: postfix
    groups: opendkim

- name: Update opendkim configuration
  template:
    src: "opendkim.conf"
    dest: /etc
  notify: restart opendkim

- name: Update postfix configuration
  template:
    src: "postfix/{{ item }}"
    dest: /etc/postfix
  with_items:
    - master.cf
    - main.cf
    - transport
    - regexp
  notify: restart postfix

- name: Set mailname for outbound mail
  template:
    src: mailname
    dest: /etc/mailname
  notify: restart postfix

- name: Configure postfix logs to go to their own directory
  copy:
    src: 50-default.conf
    dest: /etc/rsyslog.d
  notify: restart rsyslog

- name: Install memcached
  apt:
    pkg: memcached
