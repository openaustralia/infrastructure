---
# We want this directory to exist in development too so that
# things are as consistent as possible
# Basically everything in /data is stuff we want backed up that
# isn't the database
- name: Create data mountpoint
  file:
    state: directory
    path: /data

# On EC2 we're using a seperate EBS volume to hold application data
- name: Create filesystem on attached block storage
  filesystem:
    fstype: ext4
    dev: /dev/xvdh
  when: "'ec2' in group_names"

- name: Mount /data filesystem
  mount:
    path: /data
    src: /dev/xvdh
    fstype: ext4
    state: mounted
  when: "'ec2' in group_names"

- name: Create directories in /data
  file:
    path: "/data/{{ item[0] }}/{{ item[1] }}"
    owner: deploy
    group: deploy
    state: directory
  with_nested:
    - ['production', 'staging']
    - ['files', 'cache', 'bundle']

- name: Ensure that deploy owns application directories
  file:
    state: directory
    owner: deploy
    group: deploy
    path: "/srv/www/{{ item[0] }}/{{ item[1] }}"
  with_nested:
    - ['production', 'staging']
    - ['', 'shared']

- name: Link directories in /srv/www to /data
  file:
    state: link
    src: "/data/{{ item[0] }}/{{ item[1] }}"
    dest: "/srv/www/{{ item[0] }}/shared/{{ item[1] }}"
  with_nested:
    - ['production', 'staging']
    - ['files', 'cache', 'bundle']

- name: Set the ruby version for the alaveteli deploy
  copy:
    content: "{{ ruby_version }}"
    dest: /srv/www/{{ item }}/shared/rbenv-version
  with_items:
    - production
    - staging
    
- name: Another Aleveteli config to force production environment
  template:
    src: rails_env.rb
    dest: /srv/www/{{ item }}/shared
  with_items:
    - production
    - staging

- name: Remove newrelic configuration
  file:
    state: absent 
    path: /srv/www/{{ item }}/shared/newrelic.yml
  vars:
    newrelic_app_name: "Right To Know{{ (item == 'production') | ternary('', ' Staging') }}"
  with_items:
    - production
    - staging

- name: Install wrapper script for setting correct version of ruby in path
  template:
    src: run.sh
    dest: /srv/www/{{ item }}/shared
    # Make it executable
    mode: 0755
  with_items:
    - production
    - staging

# Installing via bash so that rbenv is used. Otherwise would install gems for default system ruby
- name: Install bundler gem
  command: bash -lc "gem install bundler"
  args:
    creates: "/home/deploy/.rbenv/versions/{{ ruby_version }}/lib/ruby/gems/*/gems/bundler-*"
  become: true
  become_user: deploy

- name: Add postgresql apt repository
  apt_repository:
    repo: deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main
    filename: pgdg

- name: Import postgresql repository signing key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    id: ACCC4CF8

# We're using a slightly older postgres client so that pg_dump still
# works with "-i" which would cause a rails migration to fail otherwise.
# This will be fixed by upgrading to the latest alavetelli.
- name: Install postgresql-client-9.4
  apt:
    pkg: "{{ item }}"
    update_cache: true
  with_items:
    - postgresql-client-9.4
    - libpq-dev

- name: Add mySociety Debian Package Repository key
  apt_key:
    url: https://debian.mysociety.org/debian.mysociety.org.gpg.key

# It looks like squeeze (very old) is the latest version of Debian
# that wkhtmltopdf-static is compiled for. Hmmm...
- name: Add mySociety Debian Package Repository
  apt_repository:
    repo: "deb http://debian.mysociety.org squeeze main"

# TODO: Check this list against the list https://github.com/openaustralia/alaveteli/blob/update-rbenv-deploy/config/packages.generic
- name: Install packages required by Alaveteli
  apt: name={{ item }} state=present
  with_items:
    - libicu-dev
    - libmagic-dev
    - libmagickwand-dev
    - xapian-tools
    - uuid-dev
    - wkhtmltopdf-static
    - pdftk
    - lockfile-progs
    - python-yaml
    - mutt
    - elinks
    - poppler-utils
    - wv
    - catdoc
    - gnuplot

# For some unknown reason on Ubuntu 16.04 Magick-config isn't in the path
# after installing imagemagick above
- name: Put Magick-config in the path
  file:
    state: link
    src: /usr/lib/x86_64-linux-gnu/ImageMagick-6.8.9/bin-Q16/Magick-config
    dest: /usr/local/bin/Magick-config

# The changes of there being differences between the production and staging version
# of this script are extremely small. So, just using the production version.
# This is used in cron jobs
- name: Link run-with-lockfile.sh so it's available system-wide
  file:
    src: "/srv/www/production/current/commonlib/bin/run-with-lockfile.sh"
    dest: "/usr/bin/run-with-lockfile"
    force: true
    state: link

- name: Install dependency for postgresql_db
  apt: pkg=python-psycopg2

- name: Create database
  postgresql_db:
    login_host: "{{ postgresql_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    name: "rtk-{{ item }}"
  with_items:
    - production
    - staging

- name: Create posgresql role
  postgresql_user:
    login_host: "{{ postgresql_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "rtk-{{ item }}"
    name: "rtk-{{ item }}"
    password: "{{ (item == 'production') | ternary(db_password_production, db_password_staging) }}"
    priv: ALL
    no_password_changes: true
  with_items:
    - production
    - staging

- name: Copy over database configuration for application
  template:
    src: database.yml
    dest: "/srv/www/{{ item }}/shared/database.yml"
    owner: deploy
    group: deploy
  vars:
    - stage: "{{ item }}"
    - password: "{{ (item == 'production') | ternary(db_password_production, db_password_staging) }}"
  with_items:
    - production
    - staging
  notify: nginx restart

- name: Copy init scripts
  template:
    src: "init/{{ item[1] }}"
    dest: "/etc/init.d/{{ item[1] }}-{{ item[0] }}"
    mode: 0755
  vars:
    - stage: "{{ item[0] }}"
  with_nested:
    - ['production', 'staging']
    - ['foi-alert-tracks', 'foi-purge-varnish', 'alaveteli']

- name: Generate nginx config
  template:
    src: "nginx/{{ item }}"
    dest: /etc/nginx
  with_items:
    - nginx.conf
    - htpasswd
  notify: nginx reload

- name: Copy nginx config for the app redirects
  template:
    src: nginx/default
    dest: /etc/nginx/sites-available
    owner: root
    group: root
    mode: 644
  notify: nginx reload

- name: Copy nginx config for the app
  template:
    src: nginx/stage
    dest: /etc/nginx/sites-available/{{ item }}
    owner: root
    group: root
    mode: 644
  vars:
    domain: "{{ (item == 'staging') | ternary('test.', '') }}{{ righttoknow_domain }}"
    stage: "{{ item }}"
    password_protect: "{{ item == 'staging' }}"
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Enable sites
  file:
    src: /etc/nginx/sites-available/{{ item }}
    dest: /etc/nginx/sites-enabled/{{ item }}
    state: link
  with_items:
    - default
    - production
    - staging
  notify: nginx reload

- name: Copy across the main Alaveteli config (production)
  template:
    src: general.yml
    dest: /srv/www/production/shared/
    owner: deploy
    group: deploy
  vars:
    domain: "{{ righttoknow_domain }}"
    site_name: "Right To Know"
    incoming_email_prefix: "foi+"
    staging_site: "0"
    ga_code: "UA-3107958-10"
    override_all_public_body_request_emails: null
    stage: production
  notify: nginx restart

- name: Copy across the main Alaveteli config (staging)
  template:
    src: general.yml
    dest: /srv/www/staging/shared/
    owner: deploy
    group: deploy
  vars:
    domain: "test.{{ righttoknow_domain }}"
    site_name: "Right To Know (STAGING)"
    incoming_email_prefix: "foitest+"
    staging_site: "1"
    ga_code: ""
    override_all_public_body_request_emails: "contact@righttoknow.org.au"
    stage: staging
  notify: nginx restart

- import_tasks: certificates.yml
- import_tasks: cron.yml

- name: Add deploy user to adm group so it can read mail logs
  user:
    name: deploy
    groups: adm
    append: yes

- name: Install varnish
  apt:
    pkg: varnish

- name: Update varnish config
  copy:
    src: default.vcl
    dest: /etc/varnish
  notify: restart varnish

- name: Update varnish startup config
  copy:
    src: varnish.service
    dest: /lib/systemd/system/varnish.service
  notify: restart varnish

- name: Install postfix for email handling
  apt:
    pkg: postfix

- name: Update postfix configuration
  template:
    src: "postfix/{{ item }}"
    dest: /etc/postfix
  with_items:
    - master.cf
    - main.cf
    - transport
    - regexp
  notify: restart postfix

- name: Set mailname for outbound mail
  template:
    src: mailname
    dest: /etc/mailname
  notify: restart postfix

- name: Configure postfix logs to go to their own directory
  copy:
    src: 50-default.conf
    dest: /etc/rsyslog.d
  notify: restart rsyslog

- name: Install memcached
  apt:
    pkg: memcached
