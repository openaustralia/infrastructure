---
# We want this directory to exist in development too so that
# things are as consistent as possible
# Basically everything in /data is stuff we want backed up that
# isn't the database
- name: Create data mountpoint
  file:
    state: directory
    path: /data

# On EC2 we're using a seperate EBS volume to hold application data
- name: Create filesystem on attached block storage
  filesystem:
    fstype: ext4
    dev: /dev/xvdh
  when: "'ec2' in group_names"

- name: Mount /data filesystem
  mount:
    path: /data
    src: /dev/xvdh
    fstype: ext4
    state: mounted
  when: "'ec2' in group_names"

- name: Create directories in /data
  file:
    path: "/data/{{ item[0] }}/{{ item[1] }}"
    owner: deploy
    group: www-data
    mode: 0775
    state: directory
  with_nested:
    - ['production', 'staging']
    - ['images/small', 'images/medium', 'images/large', 'images/thumbnail', 'images/original']

# The rest of the deploy directories get created by running "cap deploy:setup"
- name: Ensure that directories exist
  file: path={{ item }} owner=deploy group=deploy state=directory
  with_items:
    - "/srv/www"
    - "/srv/www/log"
    - "/srv/www/production/shared"
    - "/srv/www/production/shared/config"
    - "/srv/www/staging"
    - "/srv/www/staging/shared"
    - "/srv/www/staging/shared/config"

- name: Ensure that shared data directories exist and are writeable
  file:
    path: "/srv/www/{{ item[0] }}/shared/data/{{ item[1] }}"
    owner: deploy
    group: www-data
    mode: 0775
    state: directory
  with_nested:
    - ['production','staging']
    - - ''
      - 'smarty_compile'
      - 'cache'
      - 'temp'

- name: Link directories in /srv/www to /data
  file:
    state: link
    src: "/data/{{ item[0] }}/{{ item[1] }}"
    dest: "/srv/www/{{ item[0] }}/shared/data/{{ item[1] }}"
  with_nested:
    - ['production', 'staging']
    - - 'images'

# Create fake let's encrypt directories when in development
- name: Create fake let's encrypt directories when in development
  file:
    state: directory
    path: "/etc/letsencrypt/live/{{ item }}"
  with_items:
    - "{{ electionleaflets_domain }}"
    - "test.{{ electionleaflets_domain }}"
  when: "'development' in group_names"

# We need to setup the SSL certificates before we try to configure nginx
# because otherwise nginx will try to look for non-existent certificates
- name: Copy SSL certificates for development
  copy:
    src: "{{ item }}.pem"
    # We're faking it as if these are let's encrypt certs. Makes for less magic config
    dest: "/etc/letsencrypt/live/{{ item }}/fullchain.pem"
    mode: 0644
  with_items:
    - "{{ electionleaflets_domain }}"
    - "test.{{ electionleaflets_domain }}"
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: reload apache

- name: Copy SSL keys for development
  copy:
    src: "{{ item }}.key"
    dest: "/etc/letsencrypt/live/{{ item }}/privkey.pem"
    mode: 0640
  with_items:
    - "{{ electionleaflets_domain }}"
    - "test.{{ electionleaflets_domain }}"
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: reload apache

- name: Install apache now (for the benefit of certbot)
  apt: pkg=apache2
  when: "'ec2' in group_names"

# TODO: When (if) we use a newer version of certbot add "--post-hook" to restart apache after renew
- name: Install certificate using certbot
  include_role:
    name: geerlingguy.certbot
  vars:
    certbot_auto_renew_user: root
    certbot_auto_renew_minute: 10
    certbot_auto_renew_hour: 7
    certbot_create_if_missing: yes
    certbot_create_standalone_stop_services:
      - apache2
    certbot_certs:
      - email: contact@oaf.org.au
        domains:
          - "{{ electionleaflets_domain }}"
          - www."{{ electionleaflets_domain }}"
      - email: contact@oaf.org.au
        domains:
          - "test.{{ electionleaflets_domain }}"
          - "www.test.{{ electionleaflets_domain }}"
  when: "'ec2' in group_names"

# Install php5 on xenial requires a few more jumps than usual
- name: Add repo for installing php5
  apt_repository:
    repo: 'ppa:ondrej/php'

- name: Install packages required by Electionleaflets
  apt: name={{ item }} state=present
  with_items:
    - php5.6
    - php5.6-imap
    - php5.6-gd
    - php5.6-mysql
    - php5.6-mbstring
    - php5.6-curl
    - apache2
    - libapache2-mod-php5.6
    - python-mysqldb
    - php5.6-xml

- name: Create electionleaflets databases
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: "el-{{ item }}"
  with_items:
    - production
    - staging

- name: Create electionleaflets user with access to the database (production)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: el-production
    password: "{{ electionleaflets_production_mysql_password }}"
    priv: 'el-production.*:ALL'
    host: "%"

- name: Create electionleaflets user with access to the database (staging)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: el-staging
    password: "{{ electionleaflets_staging_mysql_password }}"
    priv: 'el-staging.*:ALL'
    host: "%"

- name: Copy application database configuration
  template:
    src: "database-{{ item }}.yml"
    dest: "/srv/www/{{ item }}/shared/config/database.yml"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging

- name: Copy deploy-user database config
  template:
    src: "my.cnf.{{ item }}"
    dest: "/srv/www/{{ item }}/shared/config/my.cnf"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging

- name: Electionleaflets main config
  template:
    src: general.php
    dest: /srv/www/{{ item }}/shared/config/
  vars:
    stage: "{{ item }}"
    db_password: "{{ (item == 'production') | ternary(electionleaflets_production_mysql_password, electionleaflets_staging_mysql_password) }}"
    domain: "{{ (item == 'staging') | ternary('test.', '') }}{{ electionleaflets_domain }}"
    email_suffix: "{{ (item == 'production') | ternary('', '-test') }}"
    s3_bucket: "{{ ( item == 'production') | ternary('electionleafletsaustralia', 'electionleafletstest2') }}"
    analytics: "{{ ( item == 'production') | ternary('UA-3107958-8','UA-3107958-9')}}"
    admin_password: "{{ ( item == 'production' ) | ternary(admin_password_production, admin_password_staging ) }}"
    upload_mail_user: "{{ ( item == 'production' ) | ternary(upload_mail_user_production, upload_mail_user_staging) }}"
    upload_mail_password: "{{ ( item == 'production' ) | ternary(upload_mail_password_production, upload_mail_password_staging) }}"
  with_items:
    - production
    - staging
  notify: reload apache

- name: Copy across the main apache config
  template: src=apache2.conf dest=/etc/apache2/
  notify: reload apache

- name: Enable apache rewrite module
  apache2_module: state=present name={{ item }}
  notify: reload apache
  with_items:
    - rewrite
    - ssl

- name: Copy the master vhost configs
  template:
    src: electionleaflets.org.au.conf
    dest: /etc/apache2/sites-available/electionleaflets.org.au.conf

- name: Copy across the apache configs
  template:
    src: electionleaflets-vhost-common.conf
    dest: "/etc/apache2/sites-available/{{ stage }}-electionleaflets-vhost-common.conf"
  vars:
    stage: "{{ item }}"
    domain: "{{ (stage == 'staging') | ternary('test.', '') }}{{ electionleaflets_domain }}"
  with_items:
    - production
    - staging
  notify: reload apache

- name: Enable virtual hosts
  file: src="../sites-available/electionleaflets.org.au.conf" dest="/etc/apache2/sites-enabled/electionleaflets.org.au.conf" state=link
  notify: reload apache
  with_items:
    - production
    - staging

- name: Disable default virtual host
  file: dest="/etc/apache2/sites-enabled/000-default.conf" state=absent
  notify: reload apache

- name: Uninstall newrelic php monitor
  apt:
    pkg: newrelic-php5 
    state: absent

- name: Remove configuration for newrelic php monitor
  file:
    state: absent
    path: /etc/php/5.6/mods-available/newrelic.ini
  notify: reload apache

- name: Disable newrelic for php
  file:
    state: absent
    path: "/etc/php/5.6/{{ item }}/conf.d/30-newrelic.ini"
  with_items:
    - apache2
    - cli
  notify: reload apache

- name: Staging mail import
  cron:
    name: "mail import {{ item }}"
    minute: "*/5"
    user: deploy
    job: "cd /srv/www/{{ item }}/current/tools && php import_mail.php"
    state: present
  with_items:
    - staging
    #- production ##Uncomment this line if we ever want to activate tihs
  when: "'ec2' in group_names"

- name: Cron for email alerts
  cron: name="email alerts" minute="*/5" user=deploy job="cd /srv/www/production/current/tools && php alertomatic.php" state=absent

- name: Autoremove unneeded packages
  apt:
    autoremove: yes