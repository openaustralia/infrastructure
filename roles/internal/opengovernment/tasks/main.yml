---
- import_tasks: certificates.yml

- name: Install dependency for ansible mysql_db module
  apt:
    pkg: python-mysqldb

# TODO: Do we want a staging setup too?
- name: Create database
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: og-production

- name: Create user with access to the database
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: og-production
    password: "{{ opengovernment_production_mysql_password }}"
    priv: 'og-production.*:ALL'
    host: "%"

- name: Install required packages
  apt: name={{ item }} state=present
  with_items:
    - php-mysql
    # - php-curl
    # - php-xml
    # - php-zip
    - apache2
    - libapache2-mod-php
    - mysql-client
  notify: reload apache

- name: Enable apache modules
  apache2_module:
    state: present
    name: "{{ item }}"
  with_items:
    - rewrite
    - ssl
  notify: reload apache

- name: Remove default index.html
  file:
    path: /var/www/html/index.html
    state: absent

- name: Set permissions
  file:
    path: /var/www/html
    owner: www-data
    group: www-data
    state: directory

# TODO: See if there is another more sensible way we could install this
- name: install wp-cli
  get_url:
    url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    dest: "/usr/local/bin/wp-cli"
    mode: 0755

- name: download wordpress
  shell: "wp-cli --path='/var/www/html' core download"
  args:
    creates: /var/www/html/index.php
  become_user: www-data

- name: configure wordpress
  shell: "wp-cli --path='/var/www/html' core config --dbname=og-production --dbuser=og-production --dbpass={{ opengovernment_production_mysql_password }} --dbhost={{ mysql_host }}"
  args:
    creates: /var/www/html/wp-config.php
  become_user: www-data

# TODO: Is there a creates in this situation?
- name: install wordpress
  shell: "wp-cli --path='/var/www/html' core install --url=https://{{ opengovernment_domain }} --title='Australian Open Government Partnership Civil Society Network' --admin_user={{ admin_user }} --admin_password={{ admin_password }} --admin_email=contact@oaf.org.au"
  become_user: www-data

# Advanced Custom Fields Pro is unfortunately not an open source plugin.
# We're using a license for a single site. So, we're including an encrypted
# copy here of the plugin ready for installation

- name: Copy across Advanced Custom Fields Pro
  copy:
    src: advanced-custom-fields-pro.zip.encrypted
    dest: /tmp/advanced-custom-fields-pro.zip

# creates has a different form so we're doing this separately from below
- name: Install wordpress plugins
  shell: "wp-cli --path='/var/www/html' plugin install --activate /tmp/advanced-custom-fields-pro.zip"
  args:
    creates: /var/www/html/wp-content/plugins/advanced-custom-fields-pro
  become_user: www-data

# creates has a different form so we're doing this separately from below
- name: Install wordpress plugins
  shell: "wp-cli --path='/var/www/html' plugin install --activate https://github.com/afragen/github-updater/archive/master.zip"
  args:
    creates: /var/www/html/wp-content/plugins/github-updater
  become_user: www-data

- name: Install wordpress plugins
  shell: "wp-cli --path='/var/www/html' plugin install --activate {{ item }}"
  args:
    creates: /var/www/html/wp-content/plugins/{{ item }}
  become_user: www-data
  with_items:
    - akismet
    - breadcrumb-navxt
    - custom-post-type-ui
    - google-analytics-for-wordpress
    - wp-pagenavi
    - wp-super-cache

# TODO: Updates to the theme are handled by the GitHub updater plugin
- name: Install opengovernment theme
  # Installs the latest on the master branch
  shell: "wp-cli --path=/var/www/html theme install https://github.com/AOGPN/opengovernment.org.au/archive/master.zip --activate"
  args:
    creates: /var/www/html/wp-content/themes/opengovernment.org.au/
  become_user: www-data

- name: Get current domain in database
  shell: "wp-cli --path=/var/www/html option get siteurl"
  become_user: www-data
  register: siteurl_contents

# TODO: Do we always want to convert urls to https?
- name: Convert domains in database
  shell: "wp-cli --path=/var/www/html search-replace {{ item }}://{{ current_siteurl }} {{ item }}://{{ new_siteurl }}"
  become_user: www-data
  vars:
    current_siteurl: "{{ siteurl_contents.stdout | urlsplit('hostname') }}"
    new_siteurl: "{{ opengovernment_domain }}"
  when: current_siteurl != new_siteurl
  with_items:
    - http
    - https

- name: Apache config
  template:
    src: 000-default.conf
    dest: /etc/apache2/sites-available
  notify: reload apache

# Normally this file is put in place by Wordpress itself when you change the
# setting on the permalinks. But doing it here so things should work out of
# the box
- name: htaccess rewrites for pretty urls
  template:
    src: htaccess
    dest: /var/www/html/.htaccess
  notify: reload apache

- name: Install postfix so users can reset passwords and cron jobs can mail out
  apt:
    pkg: postfix

# Despite the name apparently this version of newrelic monitor also supports php 7.
# See: https://discuss.newrelic.com/t/where-to-download-php7-agent/35807
- name: Uninstall newrelic php monitor
  apt:
    pkg: newrelic-php5
    state: absent

- name: Configure newrelic php monitor
  file:
    state: absent
    path: /etc/php/7.0/mods-available/newrelic.ini
  notify: reload apache

# Only give these instructions if civicrm hasn't yet been configured
- name: display post install message
  debug:
    msg:
      - 'Now you can login to the admin panel with:'
      - '  Username: {{ admin_user }}'
      - '  Password: {{ admin_password }}'

# TODO: Once in production remove smtp throttling with AWS and setup reverse DNS?
# TODO: Add newrelic application monitoring
# TODO: Mail sent to www-data needs to go to root (or switch over to deploy user)

- name: Autoremove unneeded packages
  apt:
    autoremove: yes