---
- import_tasks: certificates.yml

- name: Install dependency for ansible mysql_db module
  apt:
    pkg: python-mysqldb

# TODO: Do we want a staging setup too?
- name: Create oaf database
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: oaf-production

# For some inexplicable reason civicrm doesn't want dashes in the database name
# So, using underscore instead
- name: Create civicrm database
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: civi_production

- name: Create civi user with access to the database
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: civi_production
    password: "{{ civicrm_production_mysql_password }}"
    priv: 'civi_production.*:ALL'
    host: "%"

- name: Create oaf user with access to the database
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: oaf-production
    password: "{{ oaf_production_mysql_password }}"
    priv: 'oaf-production.*:ALL'
    host: "%"

# Install php5 on xenial requires a few more jumps than usual
- name: Add repo for installing php5
  apt_repository:
    repo: 'ppa:ondrej/php'

# We're using php 5.6 as that's the latest php supported by the
# version of civicrm currently running in production
# TODO: Check latest packages required by civicrm
# TODO: Check those required by wordpress
- name: Install required packages
  apt: name={{ item }} state=present
  with_items:
    - php5.6-mysql
    - php5.6-curl
    - php5.6-xml
    - php5.6-zip
    - php5.6-mbstring
    - apache2
    - libapache2-mod-php5.6
    - mysql-client
  notify: reload apache

- name: Enable apache modules
  apache2_module:
    state: present
    name: "{{ item }}"
  with_items:
    - rewrite
    - ssl
  notify: reload apache

- name: Remove default index.html
  file:
    path: /var/www/html/index.html
    state: absent

- name: Set permissions
  file:
    path: /var/www/html
    owner: www-data
    group: www-data
    state: directory

# TODO: See if there is another more sensible way we could install this
- name: install wp-cli
  get_url:
    url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    dest: "/usr/local/bin/wp-cli"
    mode: 0755

- name: download wordpress
  shell: "wp-cli --path='/var/www/html' core download"
  args:
    creates: /var/www/html/index.php
  become_user: www-data

- name: configure wordpress
  shell: "wp-cli --path='/var/www/html' core config --dbname=oaf-production --dbuser=oaf-production --dbpass={{ oaf_production_mysql_password }} --dbhost={{ mysql_host }}"
  args:
    creates: /var/www/html/wp-config.php
  become_user: www-data

# TODO: Is there a creates in this situation?
- name: install wordpress
  shell: "wp-cli --path='/var/www/html' core install --url=https://www.{{ oaf_domain }} --title='OpenAustralia Foundation' --admin_user={{ admin_user }} --admin_password={{ admin_password }} --admin_email=contact@oaf.org.au"
  become_user: www-data

# TODO: The admin user is not getting properly setup for some reason.
# I've had to work around this by either setting the role by hand using wp-cli
# and then also resetting the password in wordpress. it would be good to know
# what's going on but I've spent enough time trying to figure this out and it's
# somewhat academic as we'll be using a different database very quickly

# These are the plugins that were activated in production on kedumba. We're
# not bothering to install those that were installed but not activated.
# Enabling specific plugins rather than all of them at once using "--all"
# so that we don't accidently enable a plugin which is installed, not in the
# list, and not currently enabled.
- name: Install wordpress plugins
  shell: "wp-cli --path='/var/www/html' plugin install --activate {{ item }}"
  args:
    creates: /var/www/html/wp-content/plugins/{{ item }}
  become_user: www-data
  with_items:
    - advanced-edit-cforms
    - akismet
    - better-rss-widget
    - broken-link-checker
    # cforms2 gives a different version of the plugin than is currently installed on oaf.org.au
    - cforms2
    - check-email
    # CiviCRM needs to be installed differently
    - collapsing-archives
    - google-analytics-for-wordpress
    # Hello Dolly is already installed
    - hifi
    - mailchimp-for-wp
    - nivo-slider-light
    # This plugin currently breaks our site; possibly fixed after a wordpress upgrade?
    # - quotes-collection
    - recent-posts-embed
    - scalable-vector-graphics-svg
    - subscribe-to-comments
    - tagaroo
    - twitter-widget-pro
    - typekit-fonts-for-wordpress
    - update-notifier
    - widget-context
    - widget-logic
    - wordpress-importer
    - wp-twittersearch
    - wp-hide-pages
    - wp-super-cache

# creates has a different form so we're doing this separately from above
- name: Install wordpress plugins
  shell: "wp-cli --path='/var/www/html' plugin install --activate https://github.com/afragen/github-updater/archive/master.zip"
  args:
    creates: /var/www/html/wp-content/plugins/github-updater
  become_user: www-data

# This theme is required by the openaustralia foundation theme
- name: Install thematic theme
  shell: "wp-cli --path='/var/www/html' theme install thematic --version=1.0.4"
  args:
    creates: /var/www/html/wp-content/themes/thematic/
  become_user: www-data

# This theme is dependent on there being a font called "museo-slab".
# We're using typekit to provide that font. The typekit plugin needs
# to point at a typekit kit that has the museo-slab font installed.
# Updates to the theme are handled by the GitHub updater plugin
- name: Install openaustralia foundation theme
  # Installs the latest on the master branch
  shell: "wp-cli --path='/var/www/html' theme install https://github.com/openaustralia/oaf-thematic/archive/master.zip --activate"
  args:
    creates: /var/www/html/wp-content/themes/oaf-thematic/
  become_user: www-data

- name: Get current domain in database
  shell: "wp-cli --path=/var/www/html option get siteurl"
  become_user: www-data
  register: siteurl_contents

# TODO: Do we always want to convert urls to https?
- name: Convert domains in database
  shell: "wp-cli --path=/var/www/html search-replace {{ item }}://{{ current_siteurl }} {{ item }}://{{ new_siteurl }}"
  become_user: www-data
  vars:
    current_siteurl: "{{ siteurl_contents.stdout | urlsplit('hostname') }}"
    new_siteurl: "www.{{ oaf_domain }}"
  when: current_siteurl != new_siteurl
  with_items:
    - http
    - https

# TODO: Maybe worth looking at the wp-cli civicrm integration for installing civicrm?

- name: Install civicrm plugin
  shell: "wp-cli --path=/var/www/html plugin install --activate https://download.civicrm.org/civicrm-4.6.36-wordpress.zip"
  args:
    creates: /var/www/html/wp-content/plugins/civicrm
  become_user: www-data

- name: Create civicrm extensions directory
  file:
    path: /var/www/html/wp-content/plugins/files/civicrm/extensions/
    owner: www-data
    group: www-data
    state: directory

- name: Apache config
  template:
    src: 000-default.conf
    dest: /etc/apache2/sites-available
  notify: reload apache

# Normally this file is put in place by Wordpress itself when you change the
# setting on the permalinks. But doing it here so things should work out of
# the box
- name: htaccess rewrites for pretty urls
  template:
    src: htaccess
    dest: /var/www/html/.htaccess
  notify: reload apache

# This user is needed for the civicrm cron job command below
- name: Create civicrm user
  shell: "wp-cli --path=/var/www/html user update {{ civicrm_wordpress_username }} contact@oaf.org.au --role=administrator --user_pass={{ civicrm_wordpress_password }} --first_name=Civicrm --last_name=User"
  become_user: www-data

- name: Setup civicrm cron
  cron:
    user: www-data
    name: "master-civicrm-cron-job"
    # Every 15 minutes
    minute: "*/15"
    job: "/usr/bin/php /var/www/html/wp-content/plugins/civicrm/civicrm/bin/cli.php -u {{ civicrm_wordpress_username }} -p {{ civicrm_wordpress_password }} -e Job -a execute"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"

# Despite the name apparently this version of newrelic monitor also supports php 7.
# See: https://discuss.newrelic.com/t/where-to-download-php7-agent/35807
- name: Uninstall newrelic php monitor
  apt:
    pkg: newrelic-php5
    state: absent

- name: Remove configuration for newrelic php monitor
  file:
    state: absent
    path: /etc/php/5.6/mods-available/newrelic.ini
  notify: reload apache

# Do these last two things last so that the message gets displayed at the end which
# makes it useful to the person using this
- name: Check if civicrm config file exists
  stat:
    path: /var/www/html/wp-content/plugins/civicrm/civicrm.settings.php
  register: stat_result

# Only give these instructions if civicrm hasn't yet been configured
- name: display post install message
  debug:
    msg:
      - 'Now go to https://www.{{ oaf_domain }}/wp-admin/options-general.php?page=civicrm-install'
      - 'You will need to login with:'
      - '  Username: {{ admin_user }}'
      - '  Password: {{ admin_password }}'
      - 'Fill in the following details:'
      - '  MySQL server: {{ mysql_host }}'
      - '  MySQL username: civi_production'
      - '  MySQL password: {{ civicrm_production_mysql_password }}'
      - '  MySQL database: civi_production'
      - 'Then, press the button that says Check requirements and install civicrm'
  when: stat_result.stat.exists == False

# TODO: Once in production remove smtp throttling with AWS and setup reverse DNS?
# TODO: Install civicrm stripe extension automatically?
# TODO: civicrm mailer server needs to be added to spf for all main domains
# TODO: Add newrelic application monitoring
# TODO: Mail sent to www-data needs to go to root (or switch over to deploy user)

- name: Autoremove unneeded packages
  apt:
    autoremove: yes