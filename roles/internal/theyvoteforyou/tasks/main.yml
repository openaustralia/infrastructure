---
- name: Install memcached
  apt: pkg=memcached

- name: Install dependency for following command
  apt: pkg=python-mysqldb

- name: Create theyvoteforyou databases
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: "tvfy-{{ item }}"
  with_items:
    - production
    - staging

- name: Create theyvoteforyou user with access to the database (production)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: tvfy-production
    password: "{{ theyvoteforyou_production_mysql_password }}"
    priv: 'tvfy-production.*:ALL'
    host: "%"

- name: Create theyvoteforyou user with access to the database (staging)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: tvfy-staging
    password: "{{ theyvoteforyou_staging_mysql_password }}"
    priv: 'tvfy-staging.*:ALL'
    host: "%"

- name: Ensure that deploy owns /srv/www and /srv/www/shared
  file:
    state: directory
    owner: deploy
    group: deploy
    path: '{{item}}'
  with_items:
    - /srv/www
    - /srv/www/production
    - /srv/www/production/shared
    - /srv/www/staging
    - /srv/www/staging/shared

- name: Copy application settings
  copy:
    src: settings.yml
    dest: "/srv/www/{{ item }}/shared/config/"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Copy application database configuration
  template:
    src: "database-{{ item }}.yml"
    dest: "/srv/www/{{ item }}/shared/config/database.yml"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Copy application secrets
  template:
    src: secrets.yml
    dest: "/srv/www/{{ item }}/shared/config/"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Copy application newrelic configuration
  template:
    src: newrelic.yml
    dest: "/srv/www/{{ item }}/shared/config/"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Ensure packages to build gem native extensions are installed
  apt:
    pkg: "{{item}}"
  with_items:
    - libmysqlclient-dev

# Create fake let's encrypt directories when in development
- name: Create fake let's encrypt directories when in development
  file:
    state: directory
    path: "/etc/letsencrypt/live/{{ item }}"
  with_items:
    - theyvoteforyou.org.au.test
    - test.theyvoteforyou.org.au.test
  when: "'development' in group_names"

# We need to setup the SSL certificates before we try to configure nginx
# because otherwise nginx will try to look for non-existent certificates
- name: Copy SSL certificates for development
  copy:
    src: "{{ item }}.pem"
    # We're faking it as if these are let's encrypt certs. Makes for less magic config
    dest: "/etc/letsencrypt/live/{{ item }}/fullchain.pem"
    mode: 0644
  with_items:
    - theyvoteforyou.org.au.test
    - test.theyvoteforyou.org.au.test
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: nginx reload

- name: Copy SSL keys for development
  copy:
    src: "{{ item }}.key"
    dest: "/etc/letsencrypt/live/{{ item }}/privkey.pem"
    mode: 0640
  with_items:
    - theyvoteforyou.org.au.test
    - test.theyvoteforyou.org.au.test
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: nginx reload

- name: Install nginx now (for the benefit of certbot)
  apt: pkg=nginx
  when: "'ec2' in group_names"

- name: Install certificate using certbot
  include_role:
    name: geerlingguy.certbot
  vars:
    certbot_auto_renew_user: root
    certbot_auto_renew_minute: 10
    certbot_auto_renew_hour: 7
    certbot_create_if_missing: yes
    certbot_certs:
      - email: contact@oaf.org.au
        domains:
          - "{{ theyvoteforyou_domain }}"
          - "www.{{ theyvoteforyou_domain }}"
          - theyvoteforyou.org
          - www.theyvoteforyou.org
          - theyvoteforyou.com.au
          - www.theyvoteforyou.com.au
      - email: contact@oaf.org.au
        domains:
          - "test.{{ theyvoteforyou_domain }}"
          - "www.test.{{ theyvoteforyou_domain }}"
  when: "'ec2' in group_names"

- name: Copy test/test password for staging site
  copy:
    src: htpasswd
    dest: /etc/nginx/
  notify: nginx restart

- name: Copy nginx main configuration
  copy:
    src: nginx.conf
    dest: /etc/nginx/
  notify: nginx restart

- name: Copy nginx site configuration
  template:
    src: "{{ item }}"
    dest: /etc/nginx/sites-available/
  with_items:
    - default
    - production
    - staging
  notify: nginx reload

- name: Enable sites
  file:
    src: /etc/nginx/sites-available/{{ item }}
    dest: /etc/nginx/sites-enabled/{{ item }}
    state: link
  with_items:
    - default
    - production
    - staging
  notify: nginx reload

- name: Allow deploy user to control application services
  copy:
    src: theyvoteforyou_foreman
    dest: /etc/sudoers.d/
    validate: visudo -cf %s
  # notify: sudo reload

- name: Set up daily load cron job
  cron:
    name: theyvoteforyou_application_load_daily
    user: deploy
    hour: 9
    minute: 15
    weekday: 1-5
    job: "cd /srv/www/production/current && /usr/local/bin/bundle exec rake application:load:daily RAILS_ENV=production"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"

- name: Install postfix so we can mail out from cron jobs
  apt:
    pkg: postfix

# TODO: Make this mail to different addresses for development/production
- name: Mail output of cron
  cronvar:
    name: MAILTO
    user: deploy
    value: web-administrators@openaustralia.org,j1u3z8i7h9w0q8o4@oaf.slack.com
  when: "'ec2' in group_names"
