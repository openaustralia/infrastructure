---
- name: Remove apache2
  apt:
    name: apache2
    state: absent

- name: Add key for passenger
  apt_key:
    url: http://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0xAC40B2F7
    state: present

- name: Apt via https
  apt:
    name: apt-transport-https
    state: present

- name: Apt add passenger to list
  apt_repository:
    repo: 'deb https://oss-binaries.phusionpassenger.com/apt/passenger {{ansible_distribution_release}} main'
    state: present
    update_cache: yes

- name: Install nginx and passenger
  apt:
    pkg:
      - libnginx-mod-http-passenger
      - nginx
    state: present

- name: Install memcached
  apt: pkg=memcached

- name: Install pip
  apt:
    pkg: python3-pip

- name: Install dependency for following command
  pip:
    name: PyMySQL

- name: Create theyvoteforyou databases
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: "tvfy-{{ item }}"
  with_items:
    - production
    - staging

- name: Create theyvoteforyou user with access to the database (production)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: tvfy-production
    password: "{{ theyvoteforyou_production_mysql_password }}"
    priv: 'tvfy-production.*:ALL'
    host: "%"

- name: Create mysql user with readonly access to the production theyvoteforyou database for metabase
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: tvfy-production-readonly
    password: "{{ mysql_production_password_readonly }}"
    priv: 'tvfy-production.*:SELECT'
    host: "%"
  run_once: true

- name: Create theyvoteforyou user with access to the database (staging)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: tvfy-staging
    password: "{{ theyvoteforyou_staging_mysql_password }}"
    priv: 'tvfy-staging.*:ALL'
    host: "%"

- name: Ensure that deploy owns /srv/www and /srv/www/shared
  file:
    state: directory
    owner: deploy
    group: deploy
    path: '{{item}}'
  with_items:
    - /srv/www
    - /srv/www/production
    - /srv/www/production/shared
    - /srv/www/production/shared/config
    - /srv/www/production/shared/config/credentials
    - /srv/www/production/shared/public
    - /srv/www/staging
    - /srv/www/staging/shared
    - /srv/www/staging/shared/config
    - /srv/www/staging/shared/config/credentials
    - /srv/www/staging/shared/public

- name: Copy application settings
  copy:
    src: settings-{{ item }}.yml
    dest: "/srv/www/{{ item }}/shared/config/settings.yml"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Copy application database configuration
  template:
    src: "database-{{ item }}.yml"
    dest: "/srv/www/{{ item }}/shared/config/database.yml"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

# TODO: Remove secrets once we've completed the migration over to use credentials (below) instead
- name: Copy application secrets
  template:
    src: secrets.yml
    dest: "/srv/www/{{ item }}/shared/config/"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Copy rails master key for production
  template:
    src: production.key
    dest: "/srv/www/{{ item }}/shared/config/credentials/production.key"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Copy application newrelic configuration
  template:
    src: newrelic.yml
    dest: "/srv/www/{{ item }}/shared/config/"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Copy application skylight.io configuration
  template:
    src: skylight.yml
    dest: "/srv/www/{{ item }}/shared/config/"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Ensure package to build gem native extensions are installed
  apt:
    pkg: libmysqlclient-dev

# Create fake let's encrypt directories when in development
- name: Create fake let's encrypt directories when in development
  file:
    state: directory
    path: "/etc/letsencrypt/live/{{ item }}"
  with_items:
    - theyvoteforyou.org.au.test
    - test.theyvoteforyou.org.au.test
  when: "'development' in group_names"

# We need to setup the SSL certificates before we try to configure nginx
# because otherwise nginx will try to look for non-existent certificates
- name: Copy SSL certificates for development
  copy:
    src: "{{ item }}.pem"
    # We're faking it as if these are let's encrypt certs. Makes for less magic config
    dest: "/etc/letsencrypt/live/{{ item }}/fullchain.pem"
    mode: "0644"
  with_items:
    - theyvoteforyou.org.au.test
    - test.theyvoteforyou.org.au.test
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: nginx reload

- name: Copy SSL keys for development
  copy:
    src: "{{ item }}.key"
    dest: "/etc/letsencrypt/live/{{ item }}/privkey.pem"
    mode: "0640"
  with_items:
    - theyvoteforyou.org.au.test
    - test.theyvoteforyou.org.au.test
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: nginx reload

- name: Install certificate using certbot
  include_role:
    name: oaf.certbot
  vars:
    certbot_certs:
      - email: contact@oaf.org.au
        domains:
          - "{{ theyvoteforyou_domain }}"
          - "www.{{ theyvoteforyou_domain }}"
          - theyvoteforyou.org
          - www.theyvoteforyou.org
          - theyvoteforyou.com.au
          - www.theyvoteforyou.com.au
      - email: contact@oaf.org.au
        domains:
          - "test.{{ theyvoteforyou_domain }}"
          - "www.test.{{ theyvoteforyou_domain }}"
  when: "'ec2' in group_names"

- name: Copy test/test password for staging site
  copy:
    src: htpasswd
    dest: /etc/nginx/
  notify: nginx restart

- name: Copy nginx main configuration
  copy:
    src: nginx.conf
    dest: /etc/nginx/
  notify: nginx restart

- name: Copy nginx site configuration
  template:
    src: "{{ item }}"
    dest: /etc/nginx/sites-available/
  with_items:
    - default
    - production
    - staging
  notify: nginx reload

- name: Enable sites
  file:
    src: /etc/nginx/sites-available/{{ item }}
    dest: /etc/nginx/sites-enabled/{{ item }}
    state: link
  with_items:
    - default
    - production
    - staging
  notify: nginx reload

- name: Allow deploy user to control application services
  copy:
    src: theyvoteforyou_foreman
    dest: /etc/sudoers.d/
    validate: visudo -cf %s
  # notify: sudo reload

- name: Add /usr/local/bin to PATH in cron so that chromedriver can be found
  cron:
    user: deploy
    name: PATH
    env: yes
    job: /usr/local/bin:/usr/bin:/bin

- name: Set up daily load cron job
  cron:
    name: theyvoteforyou_application_load_daily
    user: deploy
    hour: "9"
    minute: "15"
    weekday: "1-5"
    job: "cd /srv/www/production/current && /usr/local/bin/bundle exec rake application:load:daily RAILS_ENV=production"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"

- name: Set up nightly cron job
  cron:
    name: theyvoteforyou_application_cron_nightly
    user: deploy
    hour: "2"
    minute: "5"
    job: "cd /srv/www/production/current && /usr/local/bin/bundle exec rake application:cron:nightly RAILS_ENV=production"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"

- name: Install postfix so we can mail out from cron jobs
  apt:
    pkg: postfix

# TODO: Make this mail to different addresses for development/production
- name: Mail output of cron
  cronvar:
    name: MAILTO
    user: deploy
    value: web-administrators@openaustralia.org,j1u3z8i7h9w0q8o4@oaf.slack.com
  when: "'ec2' in group_names"

# A version of chromedriver works with only a version of chrome. As far as I know it's not possible to install a
# specific version of chrome easily. So, instead we will take the strategy of installing the latest chrome
# and chromedriver and ensure on every run that the latest ones are installed. That way hopefully everything
# will hopefully stay in sync at the risk of chrome updating when not necessarily expected.

- name: Get Google key for install Chrome
  become: yes
  apt_key:
    url: "https://dl-ssl.google.com/linux/linux_signing_key.pub"
    state: present

- name: Apt Google repository
  apt_repository:
    repo: "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
    state: present
    update_cache: yes

- name: Install latest Chrome
  apt:
    pkg: google-chrome-stable
    # We want to make sure we're always running the latest version
    state: latest

- name: Get latest version number for chromedriver
  uri:
    url: "http://chromedriver.storage.googleapis.com/LATEST_RELEASE"
    return_content: yes
    headers:
      Content-Type: "text/plain"
  register: latest_chromedriver

- name: Download and install chromedriver
  unarchive:
    src: "https://chromedriver.storage.googleapis.com/{{ latest_chromedriver.content|trim }}/chromedriver_linux64.zip"
    dest: /usr/local/bin
    remote_src: yes

# We want this directory to exist in development too so that
# things are as consistent as possible
- name: Create data mountpoint
  file:
    state: directory
    path: /data

# On EC2 we're using a seperate EBS volume to hold application data
- name: Create filesystem on attached block storage
  filesystem:
    fstype: ext4
    dev: /dev/nvme1n1
  when: "'ec2' in group_names"

- name: Mount /data filesystem
  mount:
    path: /data
    # Mount device by UUID because that's needed to run on AWS Nitro based instances (e.g. t3)
    # See https://aws.amazon.com/premiumsupport/knowledge-center/boot-error-linux-nitro-instance/
    src: "UUID={{ ansible_facts['devices']['nvme1n1']['links']['uuids'][0] }}"
    fstype: ext4
    state: mounted
  when: "'ec2' in group_names"

- name: Create directories in /data
  file:
    path: "/data/{{ item[0] }}/{{ item[1] }}"
    owner: deploy
    group: deploy
    state: directory
  with_nested:
    - ['production', 'staging']
    - ['public', 'public/cards']

- name: Link directories in /srv/www to /data
  file:
    state: link
    src: "/data/{{ item[0] }}/{{ item[1] }}"
    dest: "/srv/www/{{ item[0] }}/shared/{{ item[1] }}"
  with_nested:
    - ['production', 'staging']
    - ['public/cards']
