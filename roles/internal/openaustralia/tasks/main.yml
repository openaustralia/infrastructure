---
# We want this directory to exist in development too so that
# things are as consistent as possible
# Basically everything in /data is stuff we want backed up that
# isn't the database
- name: Create data mountpoint
  file:
    state: directory
    path: /data

# On EC2 we're using a seperate EBS volume to hold application data
- name: Create filesystem on attached block storage
  filesystem:
    fstype: ext4
    dev: /dev/xvdh
  when: "'ec2' in group_names"

- name: Mount /data filesystem
  mount:
    path: /data
    src: /dev/xvdh
    fstype: ext4
    state: mounted
  when: "'ec2' in group_names"

- name: Create directories in /data
  file:
    path: "/data/{{ item[0] }}/{{ item[1] }}"
    owner: deploy
    group: deploy
    state: directory
  with_nested:
    - ['production', 'staging']
    - ['images/mps', 'images/mpsL', 'pwdata', 'html_cache', 'regmem_scan', 'regmem_scan_old', 'search/searchdb']

- name: Ensure that directories in /srv/www exist
  file:
    path: "/srv/www/{{ item[0] }}/{{ item[1] }}"
    owner: deploy
    group: deploy
    state: directory
  with_nested:
    - ['production', 'staging']
    - ['log', 'releases', 'shared/config', 'shared/rss/mp', 'shared/sitemaps']

- name: Link directories in /srv/www to /data
  file:
    state: link
    src: "/data/{{ item[0] }}/{{ item[1] }}"
    dest: "/srv/www/{{ item[0] }}/shared/{{ item[1] }}"
  with_nested:
    - ['production', 'staging']
    - ['images', 'pwdata', 'html_cache', 'regmem_scan', 'regmem_scan_old', 'search']

- name: Link file alerts-lastsent in /srv/www to /data
  file:
    state: link
    src: "/data/{{ item }}/alerts-lastsent"
    dest: "/srv/www/{{ item }}/shared/alerts-lastsent"
    # Doing this because the src file might not yet exist and that's okay
    force: yes
  with_items:
    - production
    - staging

- name: Install dependency for ansible mysql_db module
  apt: pkg=python-mysqldb

- name: Create openaustralia databases
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: "oa-{{ item }}"
  with_items:
    - production
    - staging

- name: Create openaustralia user with access to the database (production)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: oa-production
    password: "{{ openaustralia_production_mysql_password }}"
    priv: 'oa-production.*:ALL'
    host: "%"

- name: Create openaustralia user with access to the database (staging)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: oa-staging
    password: "{{ openaustralia_staging_mysql_password }}"
    priv: 'oa-staging.*:ALL'
    host: "%"

#This file will always point at the production db
# Which seems like that's what we want, in development
- name: Create .my.cnf in development
  template:
    src: mysql
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: "0600"
  when: "'development' in group_names"
  vars:
    db_password: "{{ (item == 'production') | ternary(openaustralia_production_mysql_password, openaustralia_staging_mysql_password) }}"
    stage: "{{ item }}"
  with_items:
    - production
    
  

# Create fake let's encrypt directories when in development
- name: Create fake let's encrypt directories when in development
  file:
    state: directory
    path: "/etc/letsencrypt/live/{{ item }}"
  with_items:
    - "{{ openaustralia_domain }}"
    - "test.{{ openaustralia_domain }}"
  when: "'development' in group_names"

# We need to setup the SSL certificates before we try to configure nginx
# because otherwise nginx will try to look for non-existent certificates
- name: Copy SSL certificates for development
  copy:
    src: "{{ item }}.pem"
    # We're faking it as if these are let's encrypt certs. Makes for less magic config
    dest: "/etc/letsencrypt/live/{{ item }}/fullchain.pem"
    mode: 0644
  with_items:
    - "{{ openaustralia_domain }}"
    - "test.{{ openaustralia_domain }}"
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: reload apache

- name: Copy SSL keys for development
  copy:
    src: "{{ item }}.key"
    dest: "/etc/letsencrypt/live/{{ item }}/privkey.pem"
    mode: 0640
  with_items:
    - "{{ openaustralia_domain }}"
    - "test.{{ openaustralia_domain }}"
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: reload apache

- name: Install apache now (for the benefit of certbot)
  apt: pkg=apache2
  when: "'ec2' in group_names"

# TODO: When (if) we use a newer version of certbot add "--post-hook" to restart apache after renew
- name: Install certificate using certbot
  include_role:
    name: geerlingguy.certbot
  vars:
    certbot_auto_renew_user: root
    certbot_auto_renew_minute: 10
    certbot_auto_renew_hour: 7
    certbot_create_if_missing: yes
    certbot_create_standalone_stop_services:
      - apache2
    certbot_certs:
      - email: contact@oaf.org.au
        domains:
          - "{{ openaustralia_domain }}"
          - www."{{ openaustralia_domain }}"
          - openaustralia.org
          - www.openaustralia.org
      - email: contact@oaf.org.au
        domains:
          - "test.{{ openaustralia_domain }}"
          - "www.test.{{ openaustralia_domain }}"
  when: "'ec2' in group_names"

# Install php5 on xenial requires a few more jumps than usual
- name: Add repo for installing php5
  apt_repository:
    repo: 'ppa:ondrej/php'

- name: Install required packages
  apt:
    name: "{{ item }}"
    update_cache: yes
  with_items:
    - php5.6
    - php5.6-curl
    - php5.6-mysql
    - apache2
    - libapache2-mod-php5.6
    - imagemagick
    - libmagickcore-dev
    - libmagickwand-dev
    - ghostscript
    - libxslt1-dev
    - libxml-twig-perl
    - msmtp
    - libdbi-perl
    - libdbd-mysql-perl
    - php5.6-dev
    - libxapian-dev
    - xapian-tools
    - libsearch-xapian-perl
    - libxml-rss-perl
    - libmysqlclient-dev

# Matching the version number of libxapian-dev above
- name: Download xapian bindings source
  get_url:
    url: https://oligarchy.co.uk/xapian/1.2.22/xapian-bindings-1.2.22.tar.xz
    dest: /home/deploy
    owner: deploy
    group: deploy
    checksum: sha256:b15ca7984980a1d2aedd3378648ef5f3889cb39a047bac1522a8e5d04f0a8557

- name: Unpack xapian bindings source
  unarchive:
      src: /home/deploy/xapian-bindings-1.2.22.tar.xz
      dest: /home/deploy
      remote_src: yes
      owner: deploy
      group: deploy

- name: Configure xapian bindings
  command: ./configure --with-php
  args:
    chdir: /home/deploy/xapian-bindings-1.2.22
    creates: /home/deploy/xapian-bindings-1.2.22/Makefile
  become_user: deploy

- name: Compile xapian bindings
  command: make
  args:
    chdir: /home/deploy/xapian-bindings-1.2.22
    creates: /home/deploy/xapian-bindings-1.2.22/php/xapian.la
  become_user: deploy

- name: Install xapian bindings
  command: make install
  args:
    chdir: /home/deploy/xapian-bindings-1.2.22
    creates: /usr/lib/php/20131226/xapian.so
  notify: reload apache

- name: Configure php for xapian bindings
  template:
    src: xapian.ini
    dest: /etc/php/5.6/mods-available
  notify: reload apache

- name: Enable xapian for php
  file:
    state: link
    src: /etc/php/5.6/mods-available/xapian.ini
    dest: "/etc/php/5.6/{{ item }}/conf.d/30-xapian.ini"
  with_items:
    - apache2
    - cli
  notify: reload apache

# rvm.ruby installes the latest bundler, which doesn't work with our old version of ruby
# 1.17.3 is the latest version that supports ruby 1.8.7

- name: Install bundler if not installed
  shell: >
    ls {{ rvm1_install_path }}/wrappers/{{ item.stdout }}
    | if ! grep "^bundler " ; then {{ rvm1_install_path }}/wrappers/{{ item.stdout }}/gem install bundler --version "1.17.3"; fi
  args:
    creates: '{{ rvm1_install_path }}/wrappers/{{ item.stdout }}/bundler'
  with_items: '{{ ruby_patch.results }}'
  when: rvm1_bundler_install
  register: bundler_install
  changed_when: '"Successfully installed bundler" in bundler_install.stdout'

- name: Symlink bundler binaries on the system path
  file:
    state: 'link'
    src: '{{ rvm1_install_path }}/wrappers/default/{{ item }}'
    dest: '{{ rvm1_symlink_to }}/{{ item }}'
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
  when: not '--user-install' in rvm1_install_flags and rvm1_bundler_install
  with_items: '{{ rvm1_symlink_bundler_binaries }}'

# TODO: It would be cleaner if gems were installed as part of the capistrano install
# Then, we could use the Gemfile rather than duplicating this information here
- name: Install required gems
  gem: name={{ item.name }} version={{ item.version }} user_install=no state=present
  with_items:
    - {name: nokogiri,      version: 1.4.4}
    - {name: mini_portile,  version: 0.6.2}
    # It errors when installing mechanize for the first time but does actually end up
    # installing it. So, wondering if we should just ignore errors for mechanize?
    # TODO: Deal with error for mechanize
    - {name: mechanize,     version: 0.9.2}
    - {name: activesupport, version: 3.0.4}
    - {name: builder,       version: 2.1.2}
    - {name: rmagick,       version: 2.15.4}
    - {name: htmlentities,  version: 4.2.1}
    - {name: log4r,         version: 1.1.8}
    - {name: json,          version: 1.8.0}
    - {name: hpricot,       version: 0.6.164}
    - {name: rspec,         version: 2.5.0}
    - {name: rcov,          version: 0.9.9}
    - {name: i18n,          version: 0.5.0}
    - {name: activerecord,  version: 2.3.11}
    - {name: mysql,         version: 2.9.1}

- name: Enable apache modules
  apache2_module: state=present name={{ item }}
  notify: reload apache
  with_items:
    - expires
    - rewrite
    - ssl

- name: Copy across the php config
  template: src=php.ini dest=/etc/php/5.6/{{ item }}/
  notify: reload apache
  with_items:
    - apache2
    - cli

- name: Copy test/test password
  copy:
    src: htpasswd
    dest: /srv/www/{{ item }}/shared
  with_items:
    - production
    - staging
  notify: reload apache

- name: Copy across the apache configs
  template:
    src: apache/stage.conf
    dest: "/etc/apache2/sites-available/{{ item }}.conf"
  vars:
    stage: "{{ item }}"
    domain: "{{ (item == 'staging') | ternary('test.', '') }}{{ openaustralia_domain }}"
    newrelic_appname: "{{ (item == 'production') | ternary('OpenAustralia.org', 'OpenAustralia.org Staging') }}"
    password_protect: "{{ item == 'staging' }}"
  with_items:
    - production
    - staging
  notify: reload apache

- name: Copy across the other apache configs
  template:
    src: "apache/{{ item }}.conf"
    dest: /etc/apache2/sites-available/
  with_items:
    - 000-default
    - data
    - software
    - blog
  notify: reload apache

- name: Copy across the application config
  template:
    src: general
    dest: "/srv/www/{{ item }}/shared"
    owner: deploy
    group: deploy
  vars:
    db_password: "{{ (item == 'production') | ternary(openaustralia_production_mysql_password, openaustralia_staging_mysql_password) }}"
    stage: "{{ item }}"
    domain: "{{ (item == 'staging') | ternary('test.', '') }}{{ openaustralia_domain }}"
  with_items:
    - production
    - staging
  notify: reload apache

- name: Copy across the parser config
  template:
    src: parser_configuration.yml
    dest: "/srv/www/{{ item }}/shared"
    owner: deploy
    group: deploy
  vars:
    stage: "{{ item }}"
  with_items:
    - production
    - staging

- name: Enable virtual hosts
  file:
    src: /etc/apache2/sites-available/{{ item }}.conf
    dest: /etc/apache2/sites-enabled/{{ item }}.conf
    state: link
  with_items:
    - production
    - staging
    - 000-default
    - data
    - software
    - blog
  notify: reload apache

- name: Copy msmtp configuration
  template: src=msmtprc dest=/etc/

# daily update at night for MP data (regmem, data from Public Whip etc.)
- name: Set up cron job for daily update
  cron:
    name: "dailyupdate {{ item }}"
    user: deploy
    hour: 1
    minute: 37
    job: "cd /srv/www/{{ item }}/current/twfy/scripts && ./dailyupdate"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

# every week early Sunday grab weekly range of data
- name: Set up cron job for weekly update
  cron:
    name: "weeklyupdate {{ item }}"
    user: deploy
    hour: 4
    minute: 23
    weekday: 0
    job: "cd /srv/www/{{ item }}/current/twfy/scripts && ./weeklyupdate"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

# Email updates (Going at 10am to give me time to fix things if necessary)
- name: Set up cron job for email alerts
  cron:
    name: "alertmailer {{ item }}"
    user: deploy
    hour: 10
    minute: 0
    weekday: "1-5"
    job: "cd /srv/www/{{ item }}/current/twfy/scripts && php -q alertmailer.php"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

# Morning update (Australian Hansard is supposed to be up by 9am the next working day)
- name: Set up cron job for morning updates
  cron:
    name: "morningupdate {{ item }}"
    user: deploy
    hour: 9
    minute: 5
    weekday: "1-5"
    job: "cd /srv/www/{{ item }}/current/twfy/scripts && VERBOSE=true ./morningupdate"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Install postfix so we can mail out from cron jobs
  apt:
    pkg: postfix

# For local development (under vagrant we don't want the cron jobs generating email)
- cronvar:
    name: MAILTO
    user: deploy
    value: web-administrators@openaustralia.org,z4e3a8v8r4p0f9z1@oaf.slack.com
  when: "'ec2' in group_names"

# TODO: I have faint memory of rsync service for data.openaustralia.org.au

- name: Uninstall newrelic php monitor
  apt:
    pkg: newrelic-php5
    state: absent

- name: Configure newrelic php monitor
  file:
    state: absent 
    path: /etc/php/5.6/mods-available/newrelic.ini
  notify: reload apache

- name: Enable newrelic for php
  file:
    state: absent
    path: "/etc/php/5.6/{{ item }}/conf.d/30-newrelic.ini"
  with_items:
    - apache2
    - cli
  notify: reload apache

# For some reason on Ubuntu 16.04 php is commented out of the mime types list
# This causes a request to /api/key to 404. So make content negotiation work by
# adding it back in
- name: Make content negotiation work again for php
  lineinfile:
    path: /etc/mime.types
    line: 'application/x-httpd-php phtml pht php'

- name: Autoremove unneeded packages
  apt:
    autoremove: yes